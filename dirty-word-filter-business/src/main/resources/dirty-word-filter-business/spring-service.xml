<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"

       xmlns:util="http://www.springframework.org/schema/util"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/util
	http://www.springframework.org/schema/util/spring-util-3.1.xsd
	  http://www.odianyun.com/schema/occ-client
      ">
    <bean id="dcenterCommonPropertyConfigurer"
          class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreUnresolvablePlaceholders" value="true"/>
        <property name="locations">
            <list>
                <value>file:${global.config.path}/dirty-word-filter/dirty-word-filter-business/jdbc.write.properties</value>
                <value>file:${global.config.path}/dirty-word-filter/dirty-word-filter-business/jdbc.read.properties</value>
            </list>
        </property>
    </bean>
    <!-- 开启自动扫描 -->
    <context:component-scan base-package="com.dirty.word.filter"></context:component-scan>
    <!-- 启用注解-->
    <context:annotation-config/>
    <!-- false 接口代理 true 继承类代理 -->
    <aop:aspectj-autoproxy proxy-target-class="false"/>
    <!--<tx:annotation-driven/>-->
    <!-- 写数据源配置-->
    <bean id="dataSourceWrite" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
          lazy-init="true">
        <property name="driverClassName">
            <value>${jdbc.write.driverClassName}</value>
        </property>
        <property name="url">
            <value>${jdbc.write.url}</value>
        </property>
        <property name="username">
            <value>${jdbc.write.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.write.password}</value>
        </property>
        <property name="minIdle">
            <value>${jdbc.write.minIdle}</value>
        </property>
        <property name="initialSize">
            <value>${jdbc.write.initialSize}</value>
        </property>
        <property name="maxActive">
            <value>${jdbc.write.maxActive}</value>
        </property>
        <property name="maxIdle">
            <value>${jdbc.write.maxIdle}</value>
        </property>
        <property name="maxWait">
            <value>${jdbc.write.maxWait}</value>
        </property>
        <property name="defaultAutoCommit">
            <value>${jdbc.write.defaultAutoCommit}</value>
        </property>
        <property name="removeAbandonedTimeout">
            <value>${jdbc.write.removeAbandonedTimeout}</value>
        </property>
        <property name="testOnBorrow">
            <value>${jdbc.write.testOnBorrow}</value>
        </property>
        <property name="testOnReturn">
            <value>${jdbc.write.testOnReturn}</value>
        </property>
        <property name="validationQuery">
            <value>${jdbc.write.validationQuery}</value>
        </property>
        <property name="validationQueryTimeout">
            <value>${jdbc.write.validationQueryTimeout}</value>
        </property>
        <property name="testWhileIdle">
            <value>${jdbc.write.testWhileIdle}</value>
        </property>
    </bean>

    <!-- 写数据源配置-->
    <bean id="dataSourceRead" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
          lazy-init="true">
        <property name="driverClassName">
            <value>${jdbc.read.driverClassName}</value>
        </property>
        <property name="url">
            <value>${jdbc.read.url}</value>
        </property>
        <property name="username">
            <value>${jdbc.read.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.read.password}</value>
        </property>
        <property name="minIdle">
            <value>${jdbc.read.minIdle}</value>
        </property>
        <property name="initialSize">
            <value>${jdbc.read.initialSize}</value>
        </property>
        <property name="maxActive">
            <value>${jdbc.read.maxActive}</value>
        </property>
        <property name="maxIdle">
            <value>${jdbc.read.maxIdle}</value>
        </property>
        <property name="maxWait">
            <value>${jdbc.read.maxWait}</value>
        </property>
        <property name="defaultAutoCommit">
            <value>${jdbc.read.defaultAutoCommit}</value>
        </property>
        <property name="removeAbandonedTimeout">
            <value>${jdbc.read.removeAbandonedTimeout}</value>
        </property>
        <property name="testOnBorrow">
            <value>${jdbc.read.testOnBorrow}</value>
        </property>
        <property name="testOnReturn">
            <value>${jdbc.read.testOnReturn}</value>
        </property>
        <property name="validationQuery">
            <value>${jdbc.read.validationQuery}</value>
        </property>
        <property name="validationQueryTimeout">
            <value>${jdbc.read.validationQueryTimeout}</value>
        </property>
        <property name="testWhileIdle">
            <value>${jdbc.read.testWhileIdle}</value>
        </property>
    </bean>






    <bean id="sqlMapClientWrite" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="dataSource" ref="dataSourceWrite"/>
        <property name="configLocation" value="classpath:dirty-word-filter-business/sqlMap-config.xml"/>
    </bean>

    <bean id="sqlMapClientRead" class="org.springframework.orm.ibatis.SqlMapClientFactoryBean">
        <property name="dataSource" ref="dataSourceRead"/>
        <property name="configLocation" value="classpath:dirty-word-filter-business/sqlMap-config.xml"/>
    </bean>

    <bean id="wordFilterImpl" class="com.dirty.word.filter.business.parser.impl.WordFilterImpl" >

        <property name="resource" >
            <value>file:${global.config.path}/dirty-word-filter/dirty-word-filter-business/key.txt</value>
        </property>
    </bean>

    <!--事务配置-->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSourceWrite"/>
    </bean>

    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <tx:attributes>
            <!--方法后缀是WithTx加入事务-->
            <tx:method name="*" propagation="REQUIRED" rollback-for="java.lang.Throwable"/>
        </tx:attributes>
    </tx:advice>

    <aop:config proxy-target-class="true">
        <aop:pointcut id="myPointCut" expression="(execution(* com.dirty.word.filter.business.write.manage.*.*(..))))"/>
        <aop:advisor advice-ref="txAdvice" pointcut-ref="myPointCut"/>
    </aop:config>

</beans>